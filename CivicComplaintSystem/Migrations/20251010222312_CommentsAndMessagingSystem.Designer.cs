// <auto-generated />
using System;
using CivicFix.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CivicFix.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251010222312_CommentsAndMessagingSystem")]
    partial class CommentsAndMessagingSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CivicFix.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CivicFix.Models.Badge", b =>
                {
                    b.Property<int>("BadgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BadgeId"));

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PointsRequired")
                        .HasColumnType("int");

                    b.HasKey("BadgeId");

                    b.ToTable("Badges");

                    b.HasData(
                        new
                        {
                            BadgeId = 1,
                            LevelName = "Bronze",
                            PointsRequired = 10
                        },
                        new
                        {
                            BadgeId = 2,
                            LevelName = "Silver",
                            PointsRequired = 30
                        },
                        new
                        {
                            BadgeId = 3,
                            LevelName = "Gold",
                            PointsRequired = 60
                        },
                        new
                        {
                            BadgeId = 4,
                            LevelName = "Platinum",
                            PointsRequired = 100
                        },
                        new
                        {
                            BadgeId = 5,
                            LevelName = "Diamond",
                            PointsRequired = 150
                        });
                });

            modelBuilder.Entity("CivicFix.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AuthorRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("VisibleToUser")
                        .HasColumnType("bit");

                    b.HasKey("CommentId");

                    b.HasIndex("ComplaintId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CivicFix.Models.CommentAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AttachmentId");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentAttachments");
                });

            modelBuilder.Entity("CivicFix.Models.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplaintId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProblemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RatingId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ComplaintId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("CivicFix.Models.ComplaintAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssignedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("int");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ComplaintAssignments");
                });

            modelBuilder.Entity("CivicFix.Models.ComplaintRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("ComplaintId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ComplaintRatings");
                });

            modelBuilder.Entity("CivicFix.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            Description = "Handles infrastructure issues",
                            Email = "publicworks@city.gov",
                            IsActive = true,
                            Name = "Public Works"
                        },
                        new
                        {
                            DepartmentId = 2,
                            Description = "Manages traffic signals and road safety",
                            Email = "traffic@city.gov",
                            IsActive = true,
                            Name = "Traffic Management"
                        },
                        new
                        {
                            DepartmentId = 3,
                            Description = "Water, sewer, and electrical issues",
                            Email = "utilities@city.gov",
                            IsActive = true,
                            Name = "Utilities"
                        });
                });

            modelBuilder.Entity("CivicFix.Models.ProblemTypeMapping", b =>
                {
                    b.Property<int>("MappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MappingId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProblemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MappingId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ProblemTypeMappings");

                    b.HasData(
                        new
                        {
                            MappingId = 1,
                            DepartmentId = 1,
                            IsActive = true,
                            ProblemType = "Pothole"
                        },
                        new
                        {
                            MappingId = 2,
                            DepartmentId = 1,
                            IsActive = true,
                            ProblemType = "Streetlight"
                        },
                        new
                        {
                            MappingId = 3,
                            DepartmentId = 2,
                            IsActive = true,
                            ProblemType = "Traffic Signal"
                        },
                        new
                        {
                            MappingId = 4,
                            DepartmentId = 3,
                            IsActive = true,
                            ProblemType = "Water Disposal"
                        },
                        new
                        {
                            MappingId = 5,
                            DepartmentId = 3,
                            IsActive = true,
                            ProblemType = "Sewer Lids"
                        },
                        new
                        {
                            MappingId = 6,
                            DepartmentId = 1,
                            IsActive = true,
                            ProblemType = "Bridges"
                        });
                });

            modelBuilder.Entity("CivicFix.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("BadgeLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CivicFix.Models.Comment", b =>
                {
                    b.HasOne("CivicFix.Models.Complaint", "Complaint")
                        .WithMany("Comments")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("CivicFix.Models.CommentAttachment", b =>
                {
                    b.HasOne("CivicFix.Models.Comment", "Comment")
                        .WithMany("Attachments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("CivicFix.Models.Complaint", b =>
                {
                    b.HasOne("CivicFix.Models.User", "AssignedToUser")
                        .WithMany("AssignedComplaints")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CivicFix.Models.Department", "Department")
                        .WithMany("AssignedComplaints")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CivicFix.Models.User", "User")
                        .WithMany("Complaints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToUser");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CivicFix.Models.ComplaintAssignment", b =>
                {
                    b.HasOne("CivicFix.Models.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CivicFix.Models.User", "AssignedToUser")
                        .WithMany("AssignmentHistory")
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("CivicFix.Models.Complaint", "Complaint")
                        .WithMany("AssignmentHistory")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CivicFix.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("AssignedByUser");

                    b.Navigation("AssignedToUser");

                    b.Navigation("Complaint");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CivicFix.Models.ComplaintRating", b =>
                {
                    b.HasOne("CivicFix.Models.Complaint", "Complaint")
                        .WithOne("Rating")
                        .HasForeignKey("CivicFix.Models.ComplaintRating", "ComplaintId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CivicFix.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Complaint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CivicFix.Models.ProblemTypeMapping", b =>
                {
                    b.HasOne("CivicFix.Models.Department", "Department")
                        .WithMany("ProblemTypeMappings")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CivicFix.Models.User", b =>
                {
                    b.HasOne("CivicFix.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CivicFix.Models.Comment", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("CivicFix.Models.Complaint", b =>
                {
                    b.Navigation("AssignmentHistory");

                    b.Navigation("Comments");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("CivicFix.Models.Department", b =>
                {
                    b.Navigation("AssignedComplaints");

                    b.Navigation("ProblemTypeMappings");
                });

            modelBuilder.Entity("CivicFix.Models.User", b =>
                {
                    b.Navigation("AssignedComplaints");

                    b.Navigation("AssignmentHistory");

                    b.Navigation("Complaints");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
