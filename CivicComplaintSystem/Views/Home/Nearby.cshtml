@{
    ViewData["Title"] = "Nearby Complaints";
}

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5>Nearby Complaints</h5>
            </div>
            <div class="card-body">
                <div id="map" style="height: 400px; border: 1px solid #ccc;"></div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h6>Nearby Issues</h6>
            </div>
            <div class="card-body">
                <div id="nearbyList">
                    <p class="text-muted">Loading nearby complaints...</p>
                </div>
            </div>
        </div>
        
        <div class="card mt-3">
            <div class="card-header">
                <h6>Report New Issue</h6>
            </div>
            <div class="card-body">
                <p>Found a problem in this area?</p>
                <a href="/Complaint/Create" class="btn btn-primary">Report Issue</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script>
    let map;
    let userLocation = null;

    $(document).ready(function() {
        initializeMap();
        getCurrentLocation();
    });

    function initializeMap() {
        map = L.map('map').setView([20.5937, 78.9629], 13); // Default location
        
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);
    }

    function getCurrentLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    userLocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    
                    map.setView([userLocation.lat, userLocation.lng], 15);
                    
                    // Add user location marker
                    L.marker([userLocation.lat, userLocation.lng])
                        .addTo(map)
                        .bindPopup('Your Location')
                        .openPopup();
                    
                    loadNearbyComplaints();
                },
                function(error) {
                    console.error('Error getting location:', error);
                    loadNearbyComplaints(); // Load without location
                }
            );
        } else {
            loadNearbyComplaints(); // Load without location
        }
    }

    function loadNearbyComplaints() {
        if (!userLocation) {
            $('#nearbyList').html('<p class="text-muted">Unable to get your location. Please enable location services.</p>');
            return;
        }

        $.get('/Map/Nearby', {
            lat: userLocation.lat,
            lng: userLocation.lng,
            radiusMeters: 500
        }).done(function(complaints) {
            console.log('Received complaints:', complaints);
            console.log('First complaint structure:', complaints[0]);
            console.log('Property names:', Object.keys(complaints[0] || {}));
            displayNearbyComplaints(complaints);
            displayComplaintsOnMap(complaints);
        }).fail(function(xhr, status, error) {
            console.error('Error loading nearby complaints:', error);
            $('#nearbyList').html('<p class="text-danger">Error loading nearby complaints. Please try again.</p>');
        });
    }

    function displayNearbyComplaints(complaints) {
        const list = $('#nearbyList');
        
        console.log('Displaying complaints:', complaints);
        console.log('Number of complaints:', complaints.length);
        
        if (complaints.length === 0) {
            list.html('<p class="text-muted">No nearby complaints found.</p>');
            return;
        }

        let html = '';
        complaints.forEach(function(complaint, index) {
            console.log(`Complaint ${index}:`, complaint);
            console.log(`ProblemType: ${complaint.ProblemType}, Status: ${complaint.Status}, UserName: ${complaint.UserName}`);
            
            // Try different property name variations
            const problemType = complaint.ProblemType || complaint.problemType || complaint.problem_type;
            const status = complaint.Status || complaint.status;
            const userName = complaint.UserName || complaint.userName || complaint.user_name;
            const address = complaint.Address || complaint.address;
            const createdAt = complaint.CreatedAt || complaint.createdAt || complaint.created_at;
            const photoPath = complaint.PhotoPath || complaint.photoPath || complaint.photo_path;
            const distance = complaint.Distance || complaint.distance;
            
            console.log(`Resolved - ProblemType: ${problemType}, Status: ${status}, UserName: ${userName}`);
            
            const statusClass = getStatusClass(status);
            const distanceRounded = Math.round(distance || 0);
            
            html += `
                <div class="complaint-item mb-3 p-2 border rounded">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="mb-1">${problemType || 'Unknown'}</h6>
                            <p class="mb-1 text-muted small">${address || 'No address'}</p>
                            <span class="badge ${statusClass}">${status || 'Unknown'}</span>
                        </div>
                        <small class="text-muted">${distanceRounded}m</small>
                    </div>
                    <div class="mt-2">
                        <small class="text-muted">Reported by ${userName || 'Unknown'} on ${createdAt ? new Date(createdAt).toLocaleDateString() : 'Unknown date'}</small>
                    </div>
                    ${photoPath ? `<img src="${photoPath}" class="img-thumbnail mt-2" style="max-width: 100px; max-height: 100px;">` : ''}
                </div>
            `;
        });
        
        list.html(html);
    }

    function displayComplaintsOnMap(complaints) {
        console.log('Displaying complaints on map:', complaints);
        complaints.forEach(function(complaint, index) {
            console.log(`Map complaint ${index}:`, complaint);
            
            // Try different property name variations
            const latitude = complaint.Latitude || complaint.latitude;
            const longitude = complaint.Longitude || complaint.longitude;
            const problemType = complaint.ProblemType || complaint.problemType || complaint.problem_type;
            const status = complaint.Status || complaint.status;
            const userName = complaint.UserName || complaint.userName || complaint.user_name;
            const createdAt = complaint.CreatedAt || complaint.createdAt || complaint.created_at;
            const photoPath = complaint.PhotoPath || complaint.photoPath || complaint.photo_path;
            const distance = complaint.Distance || complaint.distance;
            
            console.log(`Map - Latitude: ${latitude}, Longitude: ${longitude}`);
            
            if (latitude && longitude) {
                const marker = L.marker([latitude, longitude]);
                
                const statusColor = getStatusColor(status);
                const icon = L.divIcon({
                    className: 'custom-marker',
                    html: `<div style="background-color: ${statusColor}; width: 16px; height: 16px; border-radius: 50%; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);"></div>`,
                    iconSize: [16, 16],
                    iconAnchor: [8, 8]
                });
                
                marker.setIcon(icon);
                
                const popupContent = `
                    <div>
                        <h6>${problemType || 'Unknown'}</h6>
                        <p><strong>Status:</strong> <span class="badge" style="background-color: ${statusColor}">${status || 'Unknown'}</span></p>
                        <p><strong>Distance:</strong> ${Math.round(distance || 0)}m</p>
                        <p><strong>Reported by:</strong> ${userName || 'Unknown'}</p>
                        <p><strong>Date:</strong> ${createdAt ? new Date(createdAt).toLocaleDateString() : 'Unknown date'}</p>
                        ${photoPath ? `<img src="${photoPath}" style="max-width: 100px; max-height: 100px;" class="img-thumbnail mt-2">` : ''}
                    </div>
                `;
                
                marker.bindPopup(popupContent);
                marker.addTo(map);
            }
        });
    }

    function getStatusClass(status) {
        switch (status) {
            case 'Pending': return 'bg-warning text-dark';
            case 'InProgress': return 'bg-info';
            case 'Fixed': return 'bg-success';
            default: return 'bg-secondary';
        }
    }

    function getStatusColor(status) {
        switch (status) {
            case 'Pending': return '#ffc107';
            case 'InProgress': return '#17a2b8';
            case 'Fixed': return '#28a745';
            default: return '#6c757d';
        }
    }
</script>

<style>
.complaint-item {
    transition: box-shadow 0.2s;
}

.complaint-item:hover {
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.custom-marker {
    background: transparent !important;
    border: none !important;
}
</style>
}
